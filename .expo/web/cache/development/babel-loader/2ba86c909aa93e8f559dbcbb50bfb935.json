{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { UnavailabilityError } from 'expo-modules-core';\nimport Sharing from \"./ExpoSharing\";\nexport function isAvailableAsync() {\n  return _regeneratorRuntime.async(function isAvailableAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (!Sharing) {\n            _context.next = 6;\n            break;\n          }\n\n          if (!Sharing.isAvailableAsync) {\n            _context.next = 5;\n            break;\n          }\n\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(Sharing.isAvailableAsync());\n\n        case 4:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 5:\n          return _context.abrupt(\"return\", true);\n\n        case 6:\n          return _context.abrupt(\"return\", false);\n\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function shareAsync(url) {\n  var options,\n      _args2 = arguments;\n  return _regeneratorRuntime.async(function shareAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          options = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : {};\n\n          if (!(!Sharing || !Sharing.shareAsync)) {\n            _context2.next = 3;\n            break;\n          }\n\n          throw new UnavailabilityError('Sharing', 'shareAsync');\n\n        case 3:\n          _context2.next = 5;\n          return _regeneratorRuntime.awrap(Sharing.shareAsync(url, options));\n\n        case 5:\n          return _context2.abrupt(\"return\", _context2.sent);\n\n        case 6:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["../src/Sharing.ts"],"names":[],"mappings":";AAAA,SAAS,mBAAT,QAAoC,mBAApC;AAEA,OAAO,OAAP;AA4BA,OAAO,SAAe,gBAAf;EAAA;IAAA;MAAA;QAAA;UAAA,KACD,OADC;YAAA;YAAA;UAAA;;UAAA,KAEC,OAAO,CAAC,gBAFT;YAAA;YAAA;UAAA;;UAAA;UAAA,iCAGY,OAAO,CAAC,gBAAR,EAHZ;;QAAA;UAAA;;QAAA;UAAA,iCAKI,IALJ;;QAAA;UAAA,iCAQE,KARF;;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA;AAiBP,OAAO,SAAe,UAAf,CAA0B,GAA1B;EAAA;EAAA;EAAA;IAAA;MAAA;QAAA;UAAuC,OAAvC,8DAAiE,EAAjE;;UAAA,MACD,CAAC,OAAD,IAAY,CAAC,OAAO,CAAC,UADpB;YAAA;YAAA;UAAA;;UAAA,MAEG,IAAI,mBAAJ,CAAwB,SAAxB,EAAmC,YAAnC,CAFH;;QAAA;UAAA;UAAA,iCAIQ,OAAO,CAAC,UAAR,CAAmB,GAAnB,EAAwB,OAAxB,CAJR;;QAAA;UAAA;;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA","sourcesContent":["import { UnavailabilityError } from 'expo-modules-core';\n\nimport Sharing from './ExpoSharing';\n\n// @needsAudit\nexport type SharingOptions = {\n  /**\n   * Sets `mimeType` for `Intent`.\n   * @platform android\n   */\n  mimeType?: string;\n  /**\n   * [Uniform Type Identifier](https://developer.apple.com/library/archive/documentation/FileManagement/Conceptual/understanding_utis/understand_utis_conc/understand_utis_conc.html)\n   *  - the type of the target file.\n   * @platform ios\n   */\n  UTI?: string;\n  /**\n   * Sets share dialog title.\n   * @platform android\n   * @platform web\n   */\n  dialogTitle?: string;\n};\n\n// @needsAudit\n/**\n * Determine if the sharing API can be used in this app.\n * @return A promise that fulfills with `true` if the sharing API can be used, and `false` otherwise.\n */\nexport async function isAvailableAsync(): Promise<boolean> {\n  if (Sharing) {\n    if (Sharing.isAvailableAsync) {\n      return await Sharing.isAvailableAsync();\n    }\n    return true;\n  }\n\n  return false;\n}\n\n// @needsAudit\n/**\n * Opens action sheet to share file to different applications which can handle this type of file.\n * @param url Local file URL to share.\n * @param options A map of share options.\n */\nexport async function shareAsync(url: string, options: SharingOptions = {}): Promise<object> {\n  if (!Sharing || !Sharing.shareAsync) {\n    throw new UnavailabilityError('Sharing', 'shareAsync');\n  }\n  return await Sharing.shareAsync(url, options);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}